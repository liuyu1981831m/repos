{
	"name": "Notebook 1",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "leo",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "56g",
			"driverCores": 8,
			"executorMemory": "56g",
			"executorCores": 8,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/d3bb3b2e-9a7e-4194-9960-5171bd192117/resourceGroups/leorg/providers/Microsoft.Synapse/workspaces/leocanarydwserver1/bigDataPools/leo",
				"name": "leo",
				"type": "Spark",
				"endpoint": "https://leocanarydwserver1.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/leo",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "2.4",
				"nodeCount": 10,
				"cores": 8,
				"memory": 56
			}
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"tags": [
						"parameters"
					]
				},
				"source": [
					"testParam = 'default notebook value'"
				],
				"attachments": null,
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": true
				},
				"source": [
					"from pyspark.sql.types import StringType\r\n",
					"\r\n",
					"from pyspark.sql.functions import udf\r\n",
					"\r\n",
					"print(testParam)\r\n",
					"\r\n",
					"@udf(StringType())\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"def set_status(value, target_value, target_area):\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"    if any([v is None for v in [value, target_value, target_area]]):\r\n",
					"\r\n",
					"        status = \"rot\"\r\n",
					"\r\n",
					"    else:\r\n",
					"\r\n",
					"        if target_value > target_area:\r\n",
					"\r\n",
					"            if value >= target_value:\r\n",
					"\r\n",
					"                status = \"grün\"\r\n",
					"\r\n",
					"            elif (value < target_value) and (value > target_area):\r\n",
					"\r\n",
					"                status = \"gelb\"\r\n",
					"\r\n",
					"            else:\r\n",
					"\r\n",
					"                status = \"rot\"\r\n",
					"\r\n",
					"        else:\r\n",
					"\r\n",
					"            if value <= target_value:\r\n",
					"\r\n",
					"                status = \"grün\"\r\n",
					"\r\n",
					"            elif (value > target_value) and (value < target_area):\r\n",
					"\r\n",
					"                status = \"gelb\"\r\n",
					"\r\n",
					"            else:\r\n",
					"\r\n",
					"                status = \"rot\"\r\n",
					"\r\n",
					"    return status\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"# definition of a sample DataFrame\r\n",
					"\r\n",
					"df = spark.createDataFrame([(1, 5, 3)], ('value', 'target_value', 'target_area'))\r\n",
					"\r\n",
					" \r\n",
					"\r\n",
					"# test use of a UDF\r\n",
					"\r\n",
					"df.withColumn('status', set_status('value', 'target_value', 'target_area')).show()\r\n",
					"\r\n",
					"print(testParam)"
				],
				"attachments": null,
				"execution_count": 2
			}
		]
	}
}