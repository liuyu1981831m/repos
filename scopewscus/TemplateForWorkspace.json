{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "scopewscus"
		},
		"AzureDataLakeStorage1_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'AzureDataLakeStorage1'"
		},
		"AzureSynapseAnalytics1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSynapseAnalytics1'"
		},
		"CosmosDb1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'CosmosDb1'"
		},
		"scopewscus-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'scopewscus-WorkspaceDefaultSqlServer'"
		},
		"AzureDataLakeStorage1_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://leoblob.dfs.core.windows.net"
		},
		"scopewscus-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://scopeuserwestcentralus.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi Demo Interactive E2E')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Create Dataflow Debug session",
						"description": " ",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://ajayseasia.dev.azuresynapse.net/createDataflowDebugSession?api-version=2018-06-01",
							"connectVia": {
								"referenceName": "AutoResolveIntegrationRuntime",
								"type": "IntegrationRuntimeReference"
							},
							"method": "POST",
							"headers": {},
							"body": {
								"dataFlowName": "globaldataflowsession",
								"timeToLive": 60,
								"integrationRuntime": {
									"name": "BigIR",
									"properties": {
										"type": "Managed",
										"typeProperties": {
											"computeProperties": {
												"location": "AutoResolve",
												"dataFlowProperties": {
													"computeType": "General",
													"coreCount": 48,
													"timeToLive": 0
												}
											}
										}
									}
								}
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://dev.azuresynapse.net"
							}
						}
					},
					{
						"name": "Add Dataflow",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Create Dataflow Debug session",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://ajayseasia.dev.azuresynapse.net/addDataFlowToDebugSession?api-version=2018-06-01",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n  \"dataFlow\": {\n    \"name\": \"Taxi Demo ADLS to DW\",\n    \"properties\": {\n      \"description\": \" \",\n      \"type\": \"MappingDataFlow\",\n      \"typeProperties\": {\n        \"sources\": [\n          {\n            \"dataset\": {\n              \"referenceName\": \"TripDataGen2Msi\",\n              \"type\": \"DatasetReference\"\n            },\n            \"name\": \"TripData\"\n          },\n          {\n            \"dataset\": {\n              \"referenceName\": \"FareDataGen2Msi\",\n              \"type\": \"DatasetReference\"\n            },\n            \"name\": \"TripFare\"\n          }\n        ],\n        \"sinks\": [\n          {\n            \"dataset\": {\n              \"referenceName\": \"DayStatsDwMsi\",\n              \"type\": \"DatasetReference\"\n            },\n            \"name\": \"DayStatsSink\"\n          }\n        ],\n        \"transformations\": [\n          {\n            \"name\": \"JoinMatchedData\"\n          },\n          {\n            \"name\": \"AggregateDayStats\"\n          }\n        ],\n        \"script\": \"source(output(\\n\\t\\tmedallion as string,\\n\\t\\thack_license as string,\\n\\t\\tvendor_id as string,\\n\\t\\trate_code as string,\\n\\t\\tstore_and_fwd_flag as string,\\n\\t\\tpickup_datetime as string,\\n\\t\\tdropoff_datetime as string,\\n\\t\\tpassenger_count as short,\\n\\t\\ttrip_time_in_secs as long,\\n\\t\\ttrip_distance as double,\\n\\t\\tpickup_longitude as double,\\n\\t\\tpickup_latitude as double,\\n\\t\\tdropoff_longitude as double,\\n\\t\\tdropoff_latitude as double\\n\\t),\\n\\tallowSchemaDrift: false,\\n\\tvalidateSchema: false) ~> TripData\\nsource(output(\\n\\t\\tmedallion as string,\\n\\t\\t{ hack_license} as string,\\n\\t\\t{ vendor_id} as string,\\n\\t\\t{ pickup_datetime} as string,\\n\\t\\t{ payment_type} as string,\\n\\t\\t{ fare_amount} as double,\\n\\t\\t{ surcharge} as double,\\n\\t\\t{ mta_tax} as double,\\n\\t\\t{ tip_amount} as double,\\n\\t\\t{ tolls_amount} as double,\\n\\t\\t{ total_amount} as double\\n\\t),\\n\\tallowSchemaDrift: false,\\n\\tvalidateSchema: false) ~> TripFare\\nTripData, TripFare join(hack_license == { hack_license}\\n\\t&& TripData@medallion == TripFare@medallion\\n\\t&& vendor_id == { vendor_id}\\n\\t&& pickup_datetime == { pickup_datetime},\\n\\tjoinType:'inner',\\n\\tbroadcast: 'none')~> JoinMatchedData\\nJoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-MM-dd hh:mm:ss'))),\\n\\ttrip_distance = round(avg(trip_distance), 2),\\n\\t\\tpassenger_count = round(avg(passenger_count), 2),\\n\\t\\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\\n\\t\\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats\\nAggregateDayStats sink(allowSchemaDrift: true,\\n\\tvalidateSchema: false,\\n\\tdeletable:false,\\n\\tinsertable:true,\\n\\tupdateable:false,\\n\\tupsertable:false,\\n\\trecreate:true,\\n\\tformat: 'table',\\n\\tstaged: false,\\n\\tpartitionBy('hash', 1)) ~> DayStatsSink\"\n      }\n    }\n  },\n  \"datasets\": [\n    {\n      \"name\": \"TripDataGen2Msi\",\n      \"properties\": {\n        \"linkedServiceName\": {\n          \"referenceName\": \"ajayseasia-WorkspaceDefaultStorage\",\n          \"type\": \"LinkedServiceReference\"\n        },\n        \"annotations\": [],\n        \"type\": \"DelimitedText\",\n        \"typeProperties\": {\n          \"location\": {\n            \"type\": \"AzureBlobFSLocation\",\n            \"fileName\": \"trip_data_1.csv\",\n            \"fileSystem\": \"mycontainer\"\n          },\n          \"columnDelimiter\": \",\",\n          \"escapeChar\": \"\\\\\",\n          \"firstRowAsHeader\": true,\n          \"quoteChar\": \"\\\"\"\n        },\n        \"schema\": [\n          {\n            \"name\": \"medallion\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"hack_license\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"vendor_id\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"rate_code\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"store_and_fwd_flag\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"pickup_datetime\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"dropoff_datetime\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"passenger_count\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"trip_time_in_secs\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"trip_distance\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"pickup_longitude\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"pickup_latitude\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"dropoff_longitude\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \"dropoff_latitude\",\n            \"type\": \"String\"\n          }\n        ]\n      },\n      \"type\": \"Microsoft.Synapse/workspaces/datasets\"\n    },\n    {\n      \"name\": \"FareDataGen2Msi\",\n      \"properties\": {\n        \"linkedServiceName\": {\n          \"referenceName\": \"ajayseasia-WorkspaceDefaultStorage\",\n          \"type\": \"LinkedServiceReference\"\n        },\n        \"annotations\": [],\n        \"type\": \"DelimitedText\",\n        \"typeProperties\": {\n          \"location\": {\n            \"type\": \"AzureBlobFSLocation\",\n            \"fileName\": \"trip_fare_1.csv\",\n            \"fileSystem\": \"mycontainer\"\n          },\n          \"columnDelimiter\": \",\",\n          \"escapeChar\": \"\\\\\",\n          \"firstRowAsHeader\": true,\n          \"quoteChar\": \"\\\"\"\n        },\n        \"schema\": [\n          {\n            \"name\": \"medallion\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" hack_license\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" vendor_id\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" pickup_datetime\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" payment_type\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" fare_amount\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" surcharge\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" mta_tax\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" tip_amount\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" tolls_amount\",\n            \"type\": \"String\"\n          },\n          {\n            \"name\": \" total_amount\",\n            \"type\": \"String\"\n          }\n        ]\n      },\n      \"type\": \"Microsoft.Synapse/workspaces/datasets\"\n    },\n    {\n      \"name\": \"DayStatsDwMsi\",\n      \"properties\": {\n        \"linkedServiceName\": {\n          \"referenceName\": \"ajayseasia-WorkspaceDefaultSqlServer\",\n          \"type\": \"LinkedServiceReference\",\n          \"parameters\": {\n            \"DBName\": \"sql\"\n          }\n        },\n        \"annotations\": [],\n        \"type\": \"AzureSqlDWTable\",\n        \"schema\": [],\n        \"typeProperties\": {\n          \"schema\": \"dbo\",\n          \"table\": \"DayStats\"\n        }\n      },\n      \"type\": \"Microsoft.Synapse/workspaces/datasets\"\n    }\n  ],\n  \"linkedServices\": [\n    {\n      \"name\": \"ajayseasia-WorkspaceDefaultStorage\",\n      \"type\": \"Microsoft.Synapse/workspaces/linkedservices\",\n      \"properties\": {\n        \"typeProperties\": {\n          \"url\": \"https://ajaygen2seasia.dfs.core.windows.net\"\n        },\n        \"type\": \"AzureBlobFS\",\n        \"annotations\": []\n      }\n    },\n    {\n      \"name\": \"ajayseasia-WorkspaceDefaultSqlServer\",\n      \"type\": \"Microsoft.Synapse/workspaces/linkedservices\",\n      \"properties\": {\n        \"typeProperties\": {\n          \"connectionString\": \"Data Source=tcp:ajayseasia.sql.azuresynapse.net,1433;Initial Catalog=@@{linkedService().DBName}\"\n        },\n        \"parameters\": {\n          \"DBName\": {\n            \"type\": \"String\"\n          }\n        },\n        \"type\": \"AzureSqlDW\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"debugSettings\": {\n    \"sourceSettings\": [\n      {\n        \"sourceName\": \"TripData\",\n        \"rowLimit\": 1000\n      },\n      {\n        \"sourceName\": \"TripFare\",\n        \"rowLimit\": 1000\n      }\n    ],\n    \"parameters\": {},\n    \"datasetParameters\": {}\n  },\n  \"sessionId\": \"@{activity('Create Dataflow Debug session').output.sessionId}\",\n  \"userSessionId\": \"29596535-323b-447a-bd73-659d6e3f024d\",\n  \"incrementalDebug\": false\n}",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://dev.azuresynapse.net"
							}
						}
					},
					{
						"name": "Perform DataPreview",
						"type": "WebActivity",
						"dependsOn": [
							{
								"activity": "Add Dataflow",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://ajayseasia.dev.azuresynapse.net/executeDataFlowDebugCommand?api-version=2018-06-01",
							"method": "POST",
							"headers": {},
							"body": {
								"value": "{\n  \"commandPayload\": {\n    \"streamName\": \"DayStatsSink\",\n    \"rowLimits\": 100,\n    \"schemaOnly\": true\n  },\n  \"command\": \"executePreviewQuery\",\n  \"sessionId\": \"@{activity('Create Dataflow Debug session').output.sessionId}\",\n  \"userSessionId\": \"29596535-323b-447a-bd73-659d6e3f024d\",\n  \"dataFlowName\": \"Taxi Demo ADLS to DW\"\n}",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://dev.azuresynapse.net"
							}
						}
					},
					{
						"name": "Validate and Cleanup",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "Perform DataPreview",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals('Succeeded', activity('Perform DataPreview').output.status)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Fail activity",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://activityFailed.com",
										"method": "GET",
										"headers": {}
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "Delete session",
									"type": "WebActivity",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"url": "https://ajayseasia.dev.azuresynapse.net/deleteDataflowDebugSession?api-version=2018-06-01",
										"method": "POST",
										"headers": {},
										"body": {
											"value": "{\"dataFlowName\":\"globaldataflowsession\",\"sessionId\":\"@{activity('Create Dataflow Debug session').output.sessionId}\"}",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": "https://dev.azuresynapse.net"
										}
									}
								}
							]
						}
					}
				],
				"variables": {
					"AddDataflowPayloadString": {
						"type": "String"
					},
					"DataPreviewPayloadString": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2020-06-10T21:51:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi Demo with ADLS Gen2')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Taxi Demo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Taxi Demo with ADLS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripData": {},
									"TripFare": {},
									"VendorStatsSink": {},
									"TotalPaymentByPaymentType": {},
									"DayStatsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-06-10T21:51:16Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Taxi Demo with ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi Demo with DW MSI')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "Taxi Demo",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Taxi Demo ADLS to DW",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TripData": {},
									"TripFare": {},
									"VendorStatsSink": {},
									"TotalPaymentByPaymentType": {},
									"DayStatsSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"annotations": [],
				"lastPublishTime": "2020-06-10T22:36:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/Taxi Demo ADLS to DW')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DayStatsDwMsi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "DayStats"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DayStatsGen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText1')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_data_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DelimitedText2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FareDataGen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_fare_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": " hack_license",
						"type": "String"
					},
					{
						"name": " vendor_id",
						"type": "String"
					},
					{
						"name": " pickup_datetime",
						"type": "String"
					},
					{
						"name": " payment_type",
						"type": "String"
					},
					{
						"name": " fare_amount",
						"type": "String"
					},
					{
						"name": " surcharge",
						"type": "String"
					},
					{
						"name": " mta_tax",
						"type": "String"
					},
					{
						"name": " tip_amount",
						"type": "String"
					},
					{
						"name": " tolls_amount",
						"type": "String"
					},
					{
						"name": " total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/FareDataGen2Msi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_fare_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": " hack_license",
						"type": "String"
					},
					{
						"name": " vendor_id",
						"type": "String"
					},
					{
						"name": " pickup_datetime",
						"type": "String"
					},
					{
						"name": " payment_type",
						"type": "String"
					},
					{
						"name": " fare_amount",
						"type": "String"
					},
					{
						"name": " surcharge",
						"type": "String"
					},
					{
						"name": " mta_tax",
						"type": "String"
					},
					{
						"name": " tip_amount",
						"type": "String"
					},
					{
						"name": " tolls_amount",
						"type": "String"
					},
					{
						"name": " total_amount",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LeoSink')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/LeoSource')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_data_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PaymentStatsGen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/PaymentStatsGen2Msi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": false,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripDataGen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_data_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/TripDataGen2Msi')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "trip_data_1.csv",
						"fileSystem": "mycontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "medallion",
						"type": "String"
					},
					{
						"name": "hack_license",
						"type": "String"
					},
					{
						"name": "vendor_id",
						"type": "String"
					},
					{
						"name": "rate_code",
						"type": "String"
					},
					{
						"name": "store_and_fwd_flag",
						"type": "String"
					},
					{
						"name": "pickup_datetime",
						"type": "String"
					},
					{
						"name": "dropoff_datetime",
						"type": "String"
					},
					{
						"name": "passenger_count",
						"type": "String"
					},
					{
						"name": "trip_time_in_secs",
						"type": "String"
					},
					{
						"name": "trip_distance",
						"type": "String"
					},
					{
						"name": "pickup_longitude",
						"type": "String"
					},
					{
						"name": "pickup_latitude",
						"type": "String"
					},
					{
						"name": "dropoff_longitude",
						"type": "String"
					},
					{
						"name": "dropoff_latitude",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VendorStatsDwMSI')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSynapseAnalytics1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "VendorStats"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureSynapseAnalytics1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/VendorStatsGen2')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureDataLakeStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "filesystem"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AzureDataLakeStorage1')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('AzureDataLakeStorage1_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('AzureDataLakeStorage1_accountKey')]"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureSynapseAnalytics1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('AzureSynapseAnalytics1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/CosmosDb1')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "CosmosDb",
				"typeProperties": {
					"connectionString": "[parameters('CosmosDb1_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scopewscus-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('scopewscus-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/scopewscus-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('scopewscus-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				},
				"managedVirtualNetwork": {
					"type": "ManagedVirtualNetworkReference",
					"referenceName": "default"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataflowIR')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/integrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"externalComputeInfo": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/integrationRuntime2')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"externalComputeInfo": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi Demo ADLS to DW')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TripDataGen2Msi",
								"type": "DatasetReference"
							},
							"name": "TripData"
						},
						{
							"dataset": {
								"referenceName": "FareDataGen2Msi",
								"type": "DatasetReference"
							},
							"name": "TripFare"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VendorStatsDwMSI",
								"type": "DatasetReference"
							},
							"name": "VendorStatsSink"
						},
						{
							"dataset": {
								"referenceName": "PaymentStatsGen2Msi",
								"type": "DatasetReference"
							},
							"name": "TotalPaymentByPaymentType"
						},
						{
							"dataset": {
								"referenceName": "DayStatsDwMsi",
								"type": "DatasetReference"
							},
							"name": "DayStatsSink"
						}
					],
					"transformations": [
						{
							"name": "JoinMatchedData"
						},
						{
							"name": "AggregateVendorStats"
						},
						{
							"name": "AggregateDayStats"
						},
						{
							"name": "AggregateByPaymentType"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as short,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripData\nsource(output(\n\t\tmedallion as string,\n\t\t{ hack_license} as string,\n\t\t{ vendor_id} as string,\n\t\t{ pickup_datetime} as string,\n\t\t{ payment_type} as string,\n\t\t{ fare_amount} as double,\n\t\t{ surcharge} as double,\n\t\t{ mta_tax} as double,\n\t\t{ tip_amount} as double,\n\t\t{ tolls_amount} as double,\n\t\t{ total_amount} as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripFare\nTripData, TripFare join(hack_license == { hack_license}\n\t&& TripData@medallion == TripFare@medallion\n\t&& vendor_id == { vendor_id}\n\t&& pickup_datetime == { pickup_datetime},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinMatchedData\nJoinMatchedData aggregate(groupBy(vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats\nJoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-MM-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats\nTripFare aggregate(groupBy({ payment_type}),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType\nAggregateVendorStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\terrorHandlingOption: 'stopOnFirstError') ~> VendorStatsSink\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> TotalPaymentByPaymentType\nAggregateDayStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: false,\n\tpartitionBy('hash', 1),\n\terrorHandlingOption: 'stopOnFirstError') ~> DayStatsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TripDataGen2Msi')]",
				"[concat(variables('workspaceId'), '/datasets/FareDataGen2Msi')]",
				"[concat(variables('workspaceId'), '/datasets/VendorStatsDwMSI')]",
				"[concat(variables('workspaceId'), '/datasets/PaymentStatsGen2Msi')]",
				"[concat(variables('workspaceId'), '/datasets/DayStatsDwMsi')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Taxi Demo with ADLS')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": " ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "TripDataGen2",
								"type": "DatasetReference"
							},
							"name": "TripData"
						},
						{
							"dataset": {
								"referenceName": "FareDataGen2",
								"type": "DatasetReference"
							},
							"name": "TripFare"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "VendorStatsGen2",
								"type": "DatasetReference"
							},
							"name": "VendorStatsSink"
						},
						{
							"dataset": {
								"referenceName": "PaymentStatsGen2",
								"type": "DatasetReference"
							},
							"name": "TotalPaymentByPaymentType"
						},
						{
							"dataset": {
								"referenceName": "DayStatsGen2",
								"type": "DatasetReference"
							},
							"name": "DayStatsSink"
						}
					],
					"transformations": [
						{
							"name": "JoinMatchedData"
						},
						{
							"name": "AggregateVendorStats"
						},
						{
							"name": "AggregateDayStats"
						},
						{
							"name": "AggregateByPaymentType"
						}
					],
					"script": "source(output(\n\t\tmedallion as string,\n\t\thack_license as string,\n\t\tvendor_id as string,\n\t\trate_code as string,\n\t\tstore_and_fwd_flag as string,\n\t\tpickup_datetime as string,\n\t\tdropoff_datetime as string,\n\t\tpassenger_count as short,\n\t\ttrip_time_in_secs as long,\n\t\ttrip_distance as double,\n\t\tpickup_longitude as double,\n\t\tpickup_latitude as double,\n\t\tdropoff_longitude as double,\n\t\tdropoff_latitude as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripData\nsource(output(\n\t\tmedallion as string,\n\t\t{ hack_license} as string,\n\t\t{ vendor_id} as string,\n\t\t{ pickup_datetime} as string,\n\t\t{ payment_type} as string,\n\t\t{ fare_amount} as double,\n\t\t{ surcharge} as double,\n\t\t{ mta_tax} as double,\n\t\t{ tip_amount} as double,\n\t\t{ tolls_amount} as double,\n\t\t{ total_amount} as double\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> TripFare\nTripData, TripFare join(hack_license == { hack_license}\n\t&& TripData@medallion == TripFare@medallion\n\t&& vendor_id == { vendor_id}\n\t&& pickup_datetime == { pickup_datetime},\n\tjoinType:'inner',\n\tbroadcast: 'auto')~> JoinMatchedData\nJoinMatchedData aggregate(groupBy(vendor_id),\n\tpassenger_count = round(sum(passenger_count), 2),\n\t\ttrip_time_in_secs = round(sum(trip_time_in_secs)/60, 2),\n\t\ttrip_distance = round(sum(trip_distance), 2),\n\t\tTotalTripFare = round(sum({ total_amount}), 2)) ~> AggregateVendorStats\nJoinMatchedData aggregate(groupBy(DayOfTheWeek = dayOfWeek(toDate(pickup_datetime,'yyyy-mm-dd hh:mm:ss'))),\n\ttrip_distance = round(avg(trip_distance), 2),\n\t\tpassenger_count = round(avg(passenger_count), 2),\n\t\ttrip_time_in_secs = round(avg(trip_time_in_secs)/60, 2),\n\t\taverage_fare = round(avg({ total_amount}), 2)) ~> AggregateDayStats\nTripFare aggregate(groupBy({ payment_type}),\n\teach(match(type=='double'), concat($$, '_total') = round(sum ($$)))) ~> AggregateByPaymentType\nAggregateVendorStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> VendorStatsSink\nAggregateByPaymentType sink(allowSchemaDrift: true,\n\tvalidateSchema: false) ~> TotalPaymentByPaymentType\nAggregateDayStats sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['part'],\n\tpartitionBy('hash', 1)) ~> DayStatsSink"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/TripDataGen2')]",
				"[concat(variables('workspaceId'), '/datasets/FareDataGen2')]",
				"[concat(variables('workspaceId'), '/datasets/VendorStatsGen2')]",
				"[concat(variables('workspaceId'), '/datasets/PaymentStatsGen2')]",
				"[concat(variables('workspaceId'), '/datasets/DayStatsGen2')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dataflow1')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "LeoSource",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "LeoSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 sink(input(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string,\n\t\tColumn_3 as string,\n\t\tColumn_4 as string,\n\t\tColumn_5 as string,\n\t\tColumn_6 as string,\n\t\tColumn_7 as string,\n\t\tColumn_8 as string,\n\t\tColumn_9 as string,\n\t\tColumn_10 as string,\n\t\tColumn_11 as string,\n\t\tColumn_12 as string,\n\t\tColumn_13 as string,\n\t\tColumn_14 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/LeoSource')]",
				"[concat(variables('workspaceId'), '/datasets/LeoSink')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SCOPE job definition 1')]",
			"type": "Microsoft.Synapse/workspaces/scopeJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetScopePool": {
					"referenceName": "scope",
					"type": "ScopePoolReference"
				},
				"jobProperties": {
					"name": "SCOPE job definition 1",
					"scriptPath": "abfss://scope@scopeuserwestcentralus.dfs.core.windows.net/SampleScope.script",
					"runtimeName": "",
					"priority": 1000,
					"maxUnavailability": 100
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/SCOPE job definition 3')]",
			"type": "Microsoft.Synapse/workspaces/scopeJobDefinitions",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"targetScopePool": {
					"referenceName": "scope",
					"type": "ScopePoolReference"
				},
				"jobProperties": {
					"name": "SCOPE job definition 3",
					"scriptPath": "abfss://scope@scopeuserwestcentralus.dfs.core.windows.net/SampleScope.script",
					"conf": {},
					"runtimeName": "",
					"priority": 1000,
					"maxUnavailability": 100
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks",
			"apiVersion": "2019-06-01-preview",
			"properties": {},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/AzureDataLakeStorage1')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/d3bb3b2e-9a7e-4194-9960-5171bd192117/resourceGroups/leorg/providers/Microsoft.Storage/storageAccounts/leocanarytestgen2",
				"groupId": "dfs",
				"fqdns": [
					"leocanarytestgen2.dfs.core.windows.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/PrivateLinkService1')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/1e42591f-1f0c-4c5a-b7f2-a268f6105ec5/resourceGroups/leorg/providers/Microsoft.Network/privateLinkServices/leopls",
				"groupId": "",
				"fqdns": [
					"https://swissnorthproddataflowrunnerdep3.dev.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sql--leocanaryvnet')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/0ee78edb-a0ad-456c-a0a2-901bf542c102/resourceGroups/leorg/providers/Microsoft.Synapse/workspaces/leocanaryvnet",
				"groupId": "sql",
				"fqdns": [
					"leocanaryvnet.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/default/synapse-ws-sqlOnDemand--leocanaryvnet')]",
			"type": "Microsoft.Synapse/workspaces/managedVirtualNetworks/managedPrivateEndpoints",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"privateLinkResourceId": "/subscriptions/0ee78edb-a0ad-456c-a0a2-901bf542c102/resourceGroups/leorg/providers/Microsoft.Synapse/workspaces/leocanaryvnet",
				"groupId": "sqlOnDemand",
				"fqdns": [
					"leocanaryvnet-ondemand.sql.azuresynapse.net"
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/managedVirtualNetworks/default')]"
			]
		}
	]
}